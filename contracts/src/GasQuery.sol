// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

library GasQuery {
    string constant query = "const endpoint = args[0].toString();"
""
"async function getAverageGasPrice() {"
"    try {"
"        const latestBlockResponse = await Functions.makeHttpRequest({"
"            url: endpoint,"
"            method: 'POST',"
"            headers: {"
"                'Content-Type': 'application/json',"
"                'Accept': 'application/json'"
"            },"
"            data: {"
"                jsonrpc: '2.0',"
"                method: 'eth_blockNumber',"
"                params: [],"
"                id: 1"
"            }"
"        });"
""
"        const latestBlockData = latestBlockResponse.data;"
"        const latestBlockNumber = parseInt(latestBlockData.result, 16);"
""
"        const startBlock = Math.max(0, latestBlockNumber - 1);"
"        const sampleSize = 100;"
"        const gasPrices = [];"
""
"        for (let i = 0; i < sampleSize; i++) {"
"            const blockNumber = startBlock + (i * 100);"
""
"            const response = await Functions.makeHttpRequest({"
"                url: endpoint,"
"                method: 'POST',"
"                headers: {"
"                    'Content-Type': 'application/json',"
"                    'Accept': 'application/json'"
"                },"
"                data: {"
"                    jsonrpc: '2.0',"
"                    method: 'eth_getBlockByNumber',"
"                    params: [`0x${blockNumber.toString(16)}`, false],"
"                    id: 1"
"                }"
"            });"
""
"            const data = response.data;"
""
"            if (data.result && data.result.baseFeePerGas) {"
"                const gasPriceWei = parseInt(data.result.baseFeePerGas, 16);"
"                gasPrices.push(gasPriceWei);"
"            }"
"        }"
""
"        if (gasPrices.length === 0) {"
"            throw new Error('No gas prices retrieved');"
"        }"
""
"        const averageGasPriceWei = Math.floor(gasPrices.reduce((sum, price) => sum + price, 0) / gasPrices.length);"
""
"        return Functions.encodeUint256(averageGasPriceWei.toString());"
""
"    } catch (error) {"
"        return Functions.encodeUint256('0');"
"    }"
"}"
""
"async function getEstimatedAverageGasPrice() {"
"    try {"
"        const currentResponse = await Functions.makeHttpRequest({"
"            url: endpoint,"
"            method: 'POST',"
"            headers: {"
"                'Content-Type': 'application/json',"
"                'Accept': 'application/json'"
"            },"
"            data: {"
"                jsonrpc: '2.0',"
"                method: 'eth_gasPrice',"
"                params: [],"
"                id: 1"
"            }"
"        });"
""
"        const currentData = currentResponse.data;"
"        const currentGasPriceWei = parseInt(currentData.result, 16);"
""
"        const feeHistoryResponse = await Functions.makeHttpRequest({"
"            url: endpoint,"
"            method: 'POST',"
"            headers: {"
"                'Content-Type': 'application/json',"
"                'Accept': 'application/json'"
"            },"
"            data: {"
"                jsonrpc: '2.0',"
"                method: 'eth_feeHistory',"
"                params: ['0xa', 'latest', [25, 75]],"
"                id: 1"
"            }"
"        });"
""
"        const feeHistoryData = feeHistoryResponse.data;"
""
"        if (feeHistoryData.result && feeHistoryData.result.baseFeePerGas) {"
"            const baseFees = feeHistoryData.result.baseFeePerGas.map(fee => parseInt(fee, 16));"
"            const averageBaseFee = Math.floor(baseFees.reduce((sum, fee) => sum + fee, 0) / baseFees.length);"
""
"            const estimatedAverageGasPrice = averageBaseFee + (currentGasPriceWei - parseInt(feeHistoryData.result.baseFeePerGas[0], 16));"
""
"            return Functions.encodeUint256(estimatedAverageGasPrice);"
"        } else {"
"            return Functions.encodeUint256(currentGasPriceWei.toString());"
"        }"
""
"    } catch (error) {"
"        return Functions.encodeUint256(Number('0'));"
"    }"
"}"
""
"return getEstimatedAverageGasPrice();";

}